--// Services
local Players            = game:GetService("Players")
local RunService         = game:GetService("RunService")
local UserInputService   = game:GetService("UserInputService")
local ContextAction      = game:GetService("ContextActionService")

--// Locals
local localPlayer        = Players.LocalPlayer
local camera             = workspace.CurrentCamera

-- State
local aimbotEnabled      = false
local targetPlayer       = nil
local targetQuery        = ""      -- what the user typed
local isMinimized        = false

-- Input capture (to restore later)
local origMouseBehavior  = UserInputService.MouseBehavior
local origMouseIcon      = UserInputService.MouseIconEnabled

--// UI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AdminAimbotGUI"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = localPlayer:WaitForChild("PlayerGui")

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.fromOffset(360, 110)
mainFrame.Position = UDim2.new(0.35, 0, 0.35, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 32)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 26)
titleBar.BackgroundColor3 = Color3.fromRGB(18, 18, 22)
titleBar.Parent = mainFrame

local titleLabel = Instance.new("TextLabel")
titleLabel.BackgroundTransparency = 1
titleLabel.Size = UDim2.new(1, -70, 1, 0)
titleLabel.Position = UDim2.new(0, 8, 0, 0)
titleLabel.TextXAlignment = Enum.TextXAlignment.Left
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextSize = 14
titleLabel.TextColor3 = Color3.fromRGB(220, 220, 230)
titleLabel.Text = "Admin Aimbot"
titleLabel.Parent = titleBar

-- Drag
do
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Minimize button
local btnMinimize = Instance.new("TextButton")
btnMinimize.Name = "BtnMinimize"
btnMinimize.Text = "-"
btnMinimize.Font = Enum.Font.GothamBold
btnMinimize.TextSize = 18
btnMinimize.Size = UDim2.fromOffset(26, 26)
btnMinimize.Position = UDim2.new(1, -52, 0, 0)
btnMinimize.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
btnMinimize.TextColor3 = Color3.fromRGB(235, 235, 240)
btnMinimize.AutoButtonColor = true
btnMinimize.Parent = titleBar

btnMinimize.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    mainFrame.Size = isMinimized and UDim2.fromOffset(360, 26) or UDim2.fromOffset(360, 110)
end)

-- Close button
local btnClose = Instance.new("TextButton")
btnClose.Name = "BtnClose"
btnClose.Text = "X"
btnClose.Font = Enum.Font.GothamBold
btnClose.TextSize = 18
btnClose.Size = UDim2.fromOffset(26, 26)
btnClose.Position = UDim2.new(1, -26, 0, 0)
btnClose.BackgroundColor3 = Color3.fromRGB(60, 30, 30)
btnClose.TextColor3 = Color3.fromRGB(255, 240, 240)
btnClose.AutoButtonColor = true
btnClose.Parent = titleBar

-- Row: username + toggle
local txtUser = Instance.new("TextBox")
txtUser.Name = "TxtUser"
txtUser.PlaceholderText = "Type partial username..."
txtUser.Font = Enum.Font.Gotham
txtUser.TextSize = 14
txtUser.ClearTextOnFocus = false
txtUser.Size = UDim2.new(1, -120, 0, 34)
txtUser.Position = UDim2.new(0, 8, 0, 36)
txtUser.BackgroundColor3 = Color3.fromRGB(38, 38, 44)
txtUser.TextColor3 = Color3.fromRGB(255, 255, 255)
txtUser.Parent = mainFrame

local btnToggle = Instance.new("TextButton")
btnToggle.Name = "BtnToggle"
btnToggle.Text = "Aimbot: OFF (E)"
btnToggle.Font = Enum.Font.GothamBold
btnToggle.TextSize = 14
btnToggle.Size = UDim2.new(0, 104, 0, 34)
btnToggle.Position = UDim2.new(1, -112, 0, 36)
btnToggle.BackgroundColor3 = Color3.fromRGB(80, 25, 25)
btnToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
btnToggle.AutoButtonColor = true
btnToggle.Parent = mainFrame

-- Utility: find player by partial
local function findPlayerByPartial(partial)
    partial = partial:lower()
    if partial == "" then return nil end
    -- exact match first
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Name:lower() == partial then
            return plr
        end
    end
    -- then "starts with"
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Name:lower():sub(1, #partial) == partial then
            return plr
        end
    end
    -- then "contains"
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Name:lower():find(partial, 1, true) then
            return plr
        end
    end
    return nil
end

-- Feedback color
local function setUserBoxStatus(ok)
    txtUser.BackgroundColor3 = ok and Color3.fromRGB(24, 60, 32) or Color3.fromRGB(60, 24, 28)
end

local function refreshTarget()
    targetPlayer = findPlayerByPartial(targetQuery)
    setUserBoxStatus(targetPlayer ~= nil)
end

txtUser.FocusLost:Connect(function()
    targetQuery = txtUser.Text
    refreshTarget()
end)

txtUser:GetPropertyChangedSignal("Text"):Connect(function()
    targetQuery = txtUser.Text
    refreshTarget()
end)

Players.PlayerAdded:Connect(function()
    if targetQuery ~= "" then refreshTarget() end
end)
Players.PlayerRemoving:Connect(function(plr)
    if targetPlayer == plr then refreshTarget() end
end)

-- Aim target resolver
local function getAimPart(char)
    if not char then return nil end
    return char:FindFirstChild("HumanoidRootPart")
        or char:FindFirstChild("UpperTorso")
        or char:FindFirstChild("Torso")
        or char:FindFirstChild("Head")
end

-- Strong lock: bind post-camera so it overrides anything else
local BIND_NAME = "AdminAimbot_Bind"
local function bindAimbot()
    RunService:BindToRenderStep(BIND_NAME, Enum.RenderPriority.Camera.Value + 1, function()
        if not aimbotEnabled then return end

        -- Enforce mouse lock center every frame so it stays put, including with shiftlock
        if UserInputService.MouseBehavior ~= Enum.MouseBehavior.LockCenter then
            UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
        end
        if UserInputService.MouseIconEnabled then
            UserInputService.MouseIconEnabled = false
        end

        -- Validate or reacquire target
        if (not targetPlayer) or (not targetPlayer.Character) then
            refreshTarget()
        end
        local char = targetPlayer and targetPlayer.Character
        local part = getAimPart(char)
        if part then
            -- Reorient camera to keep target under crosshair center
            local camPos = camera.CFrame.Position
            local targetPos = part.Position
            camera.CFrame = CFrame.new(camPos, targetPos)
        end
    end)
end

local function unbindAimbot()
    pcall(function() RunService:UnbindFromRenderStep(BIND_NAME) end)
end

-- Toggle visuals/state
local function setToggleVisuals(on)
    btnToggle.Text = on and "Aimbot: ON (E)" or "Aimbot: OFF (E)"
    btnToggle.BackgroundColor3 = on and Color3.fromRGB(25, 80, 35) or Color3.fromRGB(80, 25, 25)
end

-- Enable/disable
local function enableAimbot()
    if aimbotEnabled then return end
    aimbotEnabled = true
    -- capture current mouse state once on enable
    origMouseBehavior = UserInputService.MouseBehavior
    origMouseIcon = UserInputService.MouseIconEnabled
    setToggleVisuals(true)
    bindAimbot()
end

local function disableAimbot()
    if not aimbotEnabled then return end
    aimbotEnabled = false
    setToggleVisuals(false)
    unbindAimbot()
    -- restore user mouse state
    UserInputService.MouseBehavior = origMouseBehavior
    UserInputService.MouseIconEnabled = origMouseIcon
end

-- Button click
btnToggle.MouseButton1Click:Connect(function()
    if aimbotEnabled then disableAimbot() else enableAimbot() end
end)

-- E hotkey (won't toggle while typing)
local function toggleAction(_name, state, input)
    if state ~= Enum.UserInputState.Begin then return Enum.ContextActionResult.Pass end
    if UserInputService:GetFocusedTextBox() then return Enum.ContextActionResult.Pass end
    if aimbotEnabled then disableAimbot() else enableAimbot() end
    return Enum.ContextActionResult.Sink
end
ContextAction:BindAction("ToggleAimbot", toggleAction, false, Enum.KeyCode.E)

-- Close cleanup
btnClose.MouseButton1Click:Connect(function()
    disableAimbot()
    ContextAction:UnbindAction("ToggleAimbot")
    screenGui:Destroy()
    -- optional: also destroy this LocalScript if itâ€™s a child of the GUI
    local ok, _ = pcall(function()
        if script and script.Parent == screenGui then
            script:Destroy()
        end
    end)
end)

-- Sensible defaults
setToggleVisuals(false)
