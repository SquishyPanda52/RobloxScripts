--[[
  Simple ESP Executor Script
  Features: Draggable, Minimize, Close; Toggle ESP; Team filtering
--]]

--// Services
local Players       = game:GetService("Players")
local RunService    = game:GetService("RunService")
local UserInput     = game:GetService("UserInputService")

local localPlayer   = Players.LocalPlayer
local playerGui     = localPlayer:WaitForChild("PlayerGui")

--// State
local espEnabled    = false
local teamFilters   = {}      -- list of lowercase team names
local highlights    = {}      -- [player] = {highlight, healthConn}

--// UI Creation
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ESPExecutorUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 260, 0, 120)
mainFrame.Position = UDim2.new(0.3, 0, 0.3, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

-- Title Bar
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 26)
titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local titleLabel = Instance.new("TextLabel")
titleLabel.BackgroundTransparency = 1
titleLabel.Size = UDim2.new(1, -60, 1, 0)
titleLabel.Position = UDim2.new(0, 8, 0, 0)
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextSize = 14
titleLabel.TextColor3 = Color3.fromRGB(235, 235, 235)
titleLabel.Text = "ESP Admin"
titleLabel.TextXAlignment = Enum.TextXAlignment.Left
titleLabel.Parent = titleBar

-- Minimize Button
local btnMin = Instance.new("TextButton")
btnMin.Size = UDim2.new(0, 26, 0, 26)
btnMin.Position = UDim2.new(1, -52, 0, 0)
btnMin.Font = Enum.Font.GothamBold
btnMin.TextSize = 18
btnMin.Text = "-"
btnMin.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
btnMin.TextColor3 = Color3.fromRGB(240, 240, 240)
btnMin.Parent = titleBar

-- Close Button
local btnClose = Instance.new("TextButton")
btnClose.Size = UDim2.new(0, 26, 0, 26)
btnClose.Position = UDim2.new(1, -26, 0, 0)
btnClose.Font = Enum.Font.GothamBold
btnClose.TextSize = 18
btnClose.Text = "X"
btnClose.BackgroundColor3 = Color3.fromRGB(80, 20, 20)
btnClose.TextColor3 = Color3.fromRGB(255, 200, 200)
btnClose.Parent = titleBar

-- ESP Toggle Button
local btnToggle = Instance.new("TextButton")
btnToggle.Size = UDim2.new(1, -16, 0, 30)
btnToggle.Position = UDim2.new(0, 8, 0, 36)
btnToggle.Font = Enum.Font.GothamBold
btnToggle.TextSize = 14
btnToggle.Text = "ESP: OFF"
btnToggle.BackgroundColor3 = Color3.fromRGB(80, 30, 30)
btnToggle.TextColor3 = Color3.fromRGB(240, 240, 240)
btnToggle.Parent = mainFrame

-- Team Filter Input
local txtFilter = Instance.new("TextBox")
txtFilter.Size = UDim2.new(1, -16, 0, 24)
txtFilter.Position = UDim2.new(0, 8, 0, 76)
txtFilter.Font = Enum.Font.Gotham
txtFilter.TextSize = 14
txtFilter.PlaceholderText = "Teams (comma separated)"
txtFilter.Text = ""
txtFilter.ClearTextOnFocus = false
txtFilter.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
txtFilter.TextColor3 = Color3.fromRGB(240, 240, 240)
txtFilter.Parent = mainFrame

--// Draggable
do
  local dragging, dragInput, dragStart, startPos
  local function update(input)
    local delta = input.Position - dragStart
    mainFrame.Position = UDim2.new(
      startPos.X.Scale, startPos.X.Offset + delta.X,
      startPos.Y.Scale, startPos.Y.Offset + delta.Y
    )
  end

  titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
      dragging = true
      dragStart = input.Position
      startPos = mainFrame.Position
      input.Changed:Connect(function()
        if input.UserInputState == Enum.UserInputState.End then
          dragging = false
        end
      end)
    end
  end)

  titleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
      dragInput = input
    end
  end)

  UserInput.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
      update(input)
    end
  end)
end

--// Minimize Logic
local isMinimized = false
btnMin.MouseButton1Click:Connect(function()
  isMinimized = not isMinimized
  mainFrame.Size = isMinimized
    and UDim2.new(0, 260, 0, 26)
    or UDim2.new(0, 260, 0, 120)
end)

--// Close Logic
btnClose.MouseButton1Click:Connect(function()
  -- disable ESP cleanup
  espEnabled = false
  for _, data in pairs(highlights) do
    if data.highlight then
      data.highlight:Destroy()
    end
    if data.healthConn then
      data.healthConn:Disconnect()
    end
  end
  screenGui:Destroy()
  -- also delete this script if parented under the GUI
  if script.Parent == screenGui then
    script:Destroy()
  end
end)

--// Team Filter Parser
local function updateFilters(txt)
  teamFilters = {}
  for name in txt:lower():gmatch("([^,]+)") do
    name = name:match("^%s*(.-)%s*$") -- trim spaces
    if name ~= "" then
      table.insert(teamFilters, name)
    end
  end
end
txtFilter:GetPropertyChangedSignal("Text"):Connect(function()
  updateFilters(txtFilter.Text)
  -- reapply filtering immediately
  for plr, data in pairs(highlights) do
    if data.highlight then
      local joinName = plr.Team and plr.Team.Name:lower() or ""
      local show = #teamFilters == 0
        or table.find(teamFilters, joinName) ~= nil
      data.highlight.Enabled = espEnabled and show
    end
  end
end)

--// Health-based Color Map
local function healthToColor(hp, maxHp)
  local frac = math.clamp(hp / maxHp, 0, 1)
  -- 0 = red, 0.33 = yellow, 0.66 = green
  local hue = frac * 0.33
  return Color3.fromHSV(hue, 1, 1)
end

--// Create / Remove Highlight for One Player
local function applyESP(plr)
  -- cleanup old
  local old = highlights[plr]
  if old then
    if old.highlight then old.highlight:Destroy() end
    if old.healthConn then old.healthConn:Disconnect() end
    highlights[plr] = nil
  end

  -- must have character + humanoid
  if not plr.Character or not plr.Character:FindFirstChild("Humanoid") then
    return
  end

  -- create Highlight
  local hl = Instance.new("Highlight")
  hl.Parent = plr.Character
  hl.FillColor = Color3.fromRGB(0, 255, 0)
  hl.FillTransparency = 0.6
  hl.OutlineTransparency = 0 -- we'll color outline
  hl.OutlineColor = Color3.new(1, 1, 1)
  hl.Enabled = false

  -- billboard for display name
  local billboard = Instance.new("BillboardGui")
  billboard.Size = UDim2.new(0, 80, 0, 16)
  billboard.StudsOffset = Vector3.new(0, 3, 0)
  billboard.Adornee = plr.Character:FindFirstChild("Head")
  billboard.AlwaysOnTop = true
  billboard.Parent = hl

  local lbl = Instance.new("TextLabel")
  lbl.Size = UDim2.new(1, 0, 1, 0)
  lbl.BackgroundTransparency = 1
  lbl.Text = plr.DisplayName
  lbl.Font = Enum.Font.Gotham
  lbl.TextSize = 12
  lbl.TextColor3 = Color3.new(1, 1, 1)
  lbl.TextStrokeTransparency = 0.5
  lbl.Parent = billboard

  -- update outline color on health change
  local humanoid = plr.Character:FindFirstChild("Humanoid")
  local conn = humanoid.HealthChanged:Connect(function(hp)
    hl.OutlineColor = healthToColor(hp, humanoid.MaxHealth)
  end)
  -- initial color
  hl.OutlineColor = healthToColor(humanoid.Health, humanoid.MaxHealth)

  -- store
  highlights[plr] = { highlight = hl, healthConn = conn }

  -- apply initial enable state based on filters
  local teamName = plr.Team and plr.Team.Name:lower() or ""
  local pass = (#teamFilters == 0)
    or table.find(teamFilters, teamName) ~= nil
  hl.Enabled = espEnabled and pass
end

--// Clean up when character dies or player leaves
local function cleanESP(plr)
  if highlights[plr] then
    local data = highlights[plr]
    if data.highlight then data.highlight:Destroy() end
    if data.healthConn then data.healthConn:Disconnect() end
    highlights[plr] = nil
  end
end

--// Listen to Players
Players.PlayerAdded:Connect(function(plr)
  plr.CharacterAdded:Connect(function()
    if espEnabled then applyESP(plr) end
  end)
end)

Players.PlayerRemoving:Connect(cleanESP)

--// Pre-apply for existing players
for _, plr in pairs(Players:GetPlayers()) do
  if plr ~= localPlayer then
    plr.CharacterAdded:Connect(function() if espEnabled then applyESP(plr) end end)
    if plr.Character then
      applyESP(plr)
    end
  end
end

--// Toggle Button Logic
btnToggle.MouseButton1Click:Connect(function()
  espEnabled = not espEnabled
  btnToggle.Text = espEnabled and "ESP: ON" or "ESP: OFF"
  btnToggle.BackgroundColor3 = espEnabled
    and Color3.fromRGB(30, 80, 30)
    or Color3.fromRGB(80, 30, 30)

  -- enable/disable all existing highlights
  for plr, data in pairs(highlights) do
    if data.highlight then
      local teamName = plr.Team and plr.Team.Name:lower() or ""
      local pass = (#teamFilters == 0)
        or table.find(teamFilters, teamName) ~= nil
      data.highlight.Enabled = espEnabled and pass
    end
  end
end)
