-- TPUA v4 - Teleport Unanchored Parts to Target with Local Highlights (AlwaysOnTop)
-- LocalScript in StarterPlayerScripts

local Players          = game:GetService("Players")
local RunService       = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService     = game:GetService("TweenService")

local LP = Players.LocalPlayer

-- Prevent duplicate UI
local GUI_NAME = "TPUA_Panel"
if LP:WaitForChild("PlayerGui", 5):FindFirstChild(GUI_NAME) then return end

-- STATE
local enabled = false
local minimized = false
local targetName = ""
local connections = {}
local candidateParts = {}    -- parts eligible for manipulation
local createdForces = {}     -- BodyPositions for manipulation
local highlights = {}        -- [BasePart] = Highlight
local highlightFolder
local heartbeatConn

-- CONFIG
local COLOR_OFF = Color3.fromRGB(30, 120, 255)
local COLOR_ON = Color3.fromRGB(230, 45, 45)
local H_OUTLINE = Color3.fromRGB(30, 120, 255)
local H_FILL = Color3.fromRGB(150, 195, 255)
local H_FILL_T = 0.7
local BG_PRIMARY = Color3.fromRGB(24, 24, 28)
local BG_SECOND = Color3.fromRGB(36, 36, 42)
local TEXT_WHITE = Color3.new(1, 1, 1)
local CORNER = UDim.new(0, 8)
local BTN_CORNER = UDim.new(0, 6)

local toggleBtn

-- UTIL
local function isCharacterPart(part)
    local model = part:FindFirstAncestorOfClass("Model")
    return model and model:FindFirstChildOfClass("Humanoid") ~= nil
end

local function shouldConsider(part)
    return part:IsA("BasePart") and not part.Anchored and not isCharacterPart(part)
end

local function ensureHighlightFolder()
    if not highlightFolder or not highlightFolder.Parent then
        highlightFolder = Instance.new("Folder")
        highlightFolder.Name = "TPUA_LocalHighlights"
        highlightFolder.Parent = workspace
    end
    return highlightFolder
end

local function addHighlight(part)
    if highlights[part] then return end
    local folder = ensureHighlightFolder()
    local h = Instance.new("Highlight")
    h.Name = "TPUA_Highlight"
    h.Adornee = part
    h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    h.OutlineColor = H_OUTLINE
    h.OutlineTransparency = 0
    h.FillColor = H_FILL
    h.FillTransparency = H_FILL_T
    h.Parent = folder
    highlights[part] = h
end

local function removeHighlight(part)
    if highlights[part] then
        highlights[part]:Destroy()
        highlights[part] = nil
    end
end

local function clearHighlights()
    for _, h in pairs(highlights) do
        h:Destroy()
    end
    highlights = {}
    if highlightFolder then highlightFolder:Destroy() end
    highlightFolder = nil
end

local function clearForces()
    for part, bp in pairs(createdForces) do
        if bp and bp.Parent then bp:Destroy() end
    end
    createdForces = {}
end

local function setToggleVisuals(btn)
    btn.Text = enabled and "TPUA: On" or "TPUA: Off"
    btn.BackgroundColor3 = enabled and COLOR_ON or COLOR_OFF
end

local function resolveTarget(name)
    if not name or name == "" then return nil end
    local lower = name:lower()
    local exact = Players:FindFirstChild(name)
    if exact then return exact end
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Name:lower():sub(1, #lower) == lower then
            return plr
        end
    end
end

local function removeCandidate(part)
    candidateParts[part] = nil
    if createdForces[part] then
        createdForces[part]:Destroy()
        createdForces[part] = nil
    end
    removeHighlight(part)
end

-- DYNAMIC DETECTION
table.insert(connections, workspace.DescendantAdded:Connect(function(obj)
    if obj:IsA("BasePart") then
        local function track()
            if enabled and shouldConsider(obj) then
                candidateParts[obj] = true
                addHighlight(obj)
            else
                removeCandidate(obj)
            end
        end
        track()
        table.insert(connections, obj:GetPropertyChangedSignal("Anchored"):Connect(track))
    end
end))

table.insert(connections, workspace.DescendantRemoving:Connect(function(obj)
    removeCandidate(obj)
end))

-- Populate initial parts
for _, obj in ipairs(workspace:GetDescendants()) do
    if obj:IsA("BasePart") and shouldConsider(obj) then
        candidateParts[obj] = true
    end
end

-- UI
local pg = LP.PlayerGui
local screenGui = Instance.new("ScreenGui", pg)
screenGui.Name = GUI_NAME
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local main = Instance.new("Frame", screenGui)
main.Size = UDim2.new(0, 300, 0, 120)
main.Position = UDim2.new(0.5, -150, 0.15, 0)
main.BackgroundColor3 = BG_PRIMARY
Instance.new("UICorner", main).CornerRadius = CORNER
Instance.new("UIStroke", main).Color = Color3.fromRGB(60, 60, 70)

local topBar = Instance.new("Frame", main)
topBar.Size = UDim2.new(1, 0, 0, 28)
topBar.BackgroundColor3 = BG_SECOND
Instance.new("UICorner", topBar).CornerRadius = BTN_CORNER

local title = Instance.new("TextLabel", topBar)
title.Size = UDim2.new(1, -68, 1, 0)
title.Position = UDim2.new(0, 8, 0, 0)
title.BackgroundTransparency = 1
title.Text = "TPUA"
title.Font = Enum.Font.GothamBold
title.TextColor3 = TEXT_WHITE
title.TextXAlignment = Enum.TextXAlignment.Left
Instance.new("UITextSizeConstraint", title).MaxTextSize = 20

local btnClose = Instance.new("TextButton", topBar)
btnClose.Size = UDim2.new(0, 28, 0, 24)
btnClose.Position = UDim2.new(1, -28, 0.5, -12)
btnClose.Text = "X"
btnClose.BackgroundColor3 = BG_PRIMARY
btnClose.TextColor3 = TEXT_WHITE
btnClose.Font = Enum.Font.GothamBold
Instance.new("UICorner", btnClose).CornerRadius = BTN_CORNER

local btnMin = Instance.new("TextButton", topBar)
btnMin.Size = UDim2.new(0, 28, 0, 24)
btnMin.Position = UDim2.new(1, -60, 0.5, -12)
btnMin.Text = "-"
btnMin.BackgroundColor3 = BG_PRIMARY
btnMin.TextColor3 = TEXT_WHITE
btnMin.Font = Enum.Font.GothamBold
Instance.new("UICorner", btnMin).CornerRadius = BTN_CORNER

local content = Instance.new("Frame", main)
content.Size = UDim2.new(1, 0, 1, -36)
content.Position = UDim2.new(0, 0, 0, 32)
content.BackgroundTransparency = 1

local row = Instance.new("Frame", content)
row.Size = UDim2.new(1, 0, 0, 40)
row.BackgroundTransparency = 1
local rowLayout = Instance.new("UIListLayout", row)
rowLayout.FillDirection = Enum.FillDirection.Horizontal
rowLayout.Padding = UDim.new(0, 8)

local userBox = Instance.new("TextBox", row)
userBox.Size = UDim2.new(0.6, -4, 1, 0)
userBox.PlaceholderText = "Target username"
userBox.BackgroundColor3 = BG_SECOND
userBox.TextColor3 = TEXT_WHITE
userBox.Font = Enum.Font.GothamBold
Instance.new("UICorner", userBox).CornerRadius = BTN_CORNER

toggleBtn = Instance.new("TextButton", row)
toggleBtn.Size = UDim2.new(0.4, -4, 1, 0)
toggleBtn.BackgroundColor3 = COLOR_OFF
toggleBtn.TextColor3 = TEXT_WHITE
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.Text = "TPUA: Off"
Instance.new("UICorner", toggleBtn).CornerRadius = BTN_CORNER

-- DRAG
do
    local dragging, dragStart, startPos
    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = main.Position
            input.Changed:Connect(function()
                if input
