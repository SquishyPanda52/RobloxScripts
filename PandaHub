-- PandaFly v2 â€” unified draggable panels, compact scaling, torso-based flight (PC/Mobile),
-- animations off while flying, E toggle (PC), mobile blocks backward, minimized icon draggable.
-- Paste into an executor or StarterPlayerScripts for testing.

-- Services
local Players        = game:GetService("Players")
local RunService     = game:GetService("RunService")
local UserInput      = game:GetService("UserInputService")
local Content        = game:GetService("ContentProvider")

local player         = Players.LocalPlayer
local camera         = workspace.CurrentCamera

-- UI root (idempotent)
local parentGui = player:FindFirstChild("PlayerGui") or game:GetService("CoreGui")
local old = parentGui:FindFirstChild("PandaFlyGUI")
if old then old:Destroy() end

local gui = Instance.new("ScreenGui")
gui.Name = "PandaFlyGUI"
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.DisplayOrder = 9e6
gui.Parent = parentGui

-- Assets (user-provided)
local PANDA = "rbxassetid://140281572489473"
local PCIMG = "rbxassetid://75277585107743"
local PHIMG = "rbxassetid://75163729493008"
pcall(function() Content:PreloadAsync({PANDA, PCIMG, PHIMG}) end)

-- Theme
local C_TOPBAR     = Color3.fromRGB(40, 120, 30)   -- darker "own color tab"
local C_BODY_A     = Color3.fromRGB(0, 255, 0)     -- gradient start
local C_BODY_B     = Color3.fromRGB(255, 255, 0)   -- gradient end
local C_BTN        = Color3.fromRGB(0, 140, 0)
local C_TEXT       = Color3.new(1,1,1)
local C_BLACK      = Color3.new(0,0,0)

-- Helpers
local function corner(p, r) local c=Instance.new("UICorner"); c.CornerRadius=UDim.new(0,r or 10); c.Parent=p end
local function stroke(p, t) local s=Instance.new("UIStroke"); s.Color=C_BLACK; s.Thickness=t or 1; s.Parent=p end
local function gradient(p, a, b, rot)
    local g=Instance.new("UIGradient"); g.Color=ColorSequence.new(a or C_BODY_A, b or C_BODY_B); g.Rotation=rot or 90; g.Parent=p
end
local function labelTextProps(lbl)
    lbl.Font = Enum.Font.Bangers
    lbl.TextColor3 = C_TEXT
    lbl.TextStrokeColor3 = C_BLACK
    lbl.TextStrokeTransparency = 0
end
local function buttonStyle(btn)
    btn.BackgroundColor3 = C_BTN
    btn.AutoButtonColor = true
    btn.Font = Enum.Font.Bangers
    btn.TextColor3 = C_TEXT
    btn.TextStrokeColor3 = C_BLACK
    btn.TextStrokeTransparency = 0
    btn.TextScaled = true
    corner(btn, 8); stroke(btn, 1)
end

-- Dragging (bar handles, moves whole panel; supports mouse + touch)
local function makePanelDraggable(panel, dragHandle)
    local dragging=false
    local dragStart, startPos
    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
            dragging=true
            dragStart=input.Position
            startPos=panel.Position
            input.Changed:Connect(function()
                if input.UserInputState==Enum.UserInputState.End then dragging=false end
            end)
        end
    end)
    dragHandle.InputChanged:Connect(function(input)
        if not dragging then return end
        if input.UserInputType==Enum.UserInputType.MouseMovement or input.UserInputType==Enum.UserInputType.Touch then
            local delta = input.Position - dragStart
            panel.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- Minimized panda icon (draggable + click-to-restore)
local function spawnMini(onRestore)
    local mini = Instance.new("Frame")
    mini.Name = "MiniPanda"
    mini.Size = UDim2.fromOffset(48,48)
    mini.Position = UDim2.new(0.5, -24, 0.5, -24)
    mini.BackgroundColor3 = C_TOPBAR
    mini.Active = true
    corner(mini, 12); stroke(mini, 1)
    mini.Parent = gui

    local img = Instance.new("ImageLabel")
    img.BackgroundTransparency = 1
    img.Image = PANDA
    img.Size = UDim2.fromScale(1,1)
    img.Parent = mini

    -- drag + click threshold
    local dragging, moved = false, 0
    mini.InputBegan:Connect(function(input)
        if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
            dragging=true; moved=0
        end
    end)
    mini.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType==Enum.UserInputType.MouseMovement or input.UserInputType==Enum.UserInputType.Touch) then
            moved = moved + 1
        end
    end)
    mini.InputEnded:Connect(function(input)
        if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
            local wasDrag = moved > 2
            dragging=false
            if not wasDrag then
                mini:Destroy()
                onRestore()
            end
        end
    end)

    makePanelDraggable(mini, mini)
end

-- Flight state
local flyConn, animConn, deathConn
local flying = false
local mode = "none" -- "pc" or "phone"
local speed = 16

-- Physics attachments
local rootAtt, align, linVel, antiGrav

local function stopAnimations(humanoid)
    for _,track in ipairs(humanoid:GetPlayingAnimationTracks()) do
        track:Stop(0.1)
    end
end

local function cleanFlight()
    if flyConn then flyConn:Disconnect(); flyConn=nil end
    if animConn then animConn:Disconnect(); animConn=nil end
    if align then align:Destroy(); align=nil end
    if linVel then linVel:Destroy(); linVel=nil end
    if antiGrav then antiGrav:Destroy(); antiGrav=nil end
    if rootAtt then rootAtt:Destroy(); rootAtt=nil end
    local char = player.Character
    if char then
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then hum.AutoRotate=true end
    end
end

local function getMoveVectorMobile()
    -- Try PlayerModule controls; fallback to projecting MoveDirection
    local controls
    local ps = player:FindFirstChild("PlayerScripts")
    local pm = ps and ps:FindFirstChild("PlayerModule")
    if pm then
        pcall(function() controls = require(pm):GetControls() end)
    end
    if controls and controls.GetMoveVector then
        local v = controls:GetMoveVector()
        return Vector2.new(v.X, -v.Z) -- x=strafe, y=forward
    end
    local hum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if hum then
        local dir = hum.MoveDirection
        local f = dir:Dot(camera.CFrame.LookVector)
        local s = dir:Dot(camera.CFrame.RightVector)
        return Vector2.new(s, f)
    end
    return Vector2.zero
end

local key = {W=false,A=false,S=false,D=false}
local kbConns = {}

local function bindPCKeys()
    for _,conn in ipairs(kbConns) do conn:Disconnect() end
    kbConns = {}
    table.insert(kbConns, UserInput.InputBegan:Connect(function(inp, gp)
        if gp then return end
        if UserInput:GetFocusedTextBox() then return end
        if inp.KeyCode == Enum.KeyCode.W then key.W = true end
        if inp.KeyCode == Enum.KeyCode.A then key.A = true end
        if inp.KeyCode == Enum.KeyCode.S then key.S = true end
        if inp.KeyCode == Enum.KeyCode.D then key.D = true end
        if inp.KeyCode == Enum.KeyCode.E then
            if mode == "pc" then flying = not flying end
        end
    end))
    table.insert(kbConns, UserInput.InputEnded:Connect(function(inp)
        if inp.KeyCode == Enum.KeyCode.W then key.W = false end
        if inp.KeyCode == Enum.KeyCode.A then key.A = false end
        if inp.KeyCode == Enum.KeyCode.S then key.S = false end
        if inp.KeyCode == Enum.KeyCode.D then key.D = false end
    end))
end

local function unbindPCKeys()
    for _,conn in ipairs(kbConns) do conn:Disconnect() end
    kbConns = {}
    key.W, key.A, key.S, key.D = false,false,false,false
end

local function startFlightCore()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart")
    local hum = char:WaitForChild("Humanoid")

    -- Build actuators
    rootAtt = Instance.new("Attachment", hrp)

    align = Instance.new("AlignOrientation")
    align.Attachment0 = rootAtt
    align.Mode = Enum.OrientationAlignmentMode.OneAttachment
    align.Responsiveness = 80
    align.MaxTorque = math.huge
    align.Parent = hrp

    linVel = Instance.new("LinearVelocity")
    linVel.Attachment0 = rootAtt
    linVel.MaxForce = math.huge
    linVel.RelativeTo = Enum.ActuatorRelativeTo.World
    linVel.Parent = hrp

    antiGrav = Instance.new("VectorForce")
    antiGrav.Attachment0 = rootAtt
    antiGrav.RelativeTo = Enum.ActuatorRelativeTo.World
    antiGrav.Force = Vector3.new(0, hrp.AssemblyMass * workspace.Gravity, 0)
    antiGrav.Parent = hrp

    hum.AutoRotate = false

    -- Stop anims while flying
    animConn = RunService.Stepped:Connect(function()
        if flying then stopAnimations(hum) end
    end)

    flyConn = RunService.RenderStepped:Connect(function()
        if not flying then
            -- idle: no velocity, but keep anti-grav off so character drops normally
            linVel.VectorVelocity = Vector3.zero
            antiGrav.Enabled = false
            return
        end

        antiGrav.Enabled = true

        -- Face where the camera looks (full pitch for up/down flight)
        local camCF = camera.CFrame
        local look = camCF.LookVector
        align.CFrame = CFrame.lookAt(hrp.Position, hrp.Position + look)

        -- Compute desired move (torso/camera basis)
        local forward, strafe
        if mode == "pc" then
            local f = (key.W and 1 or 0) + (key.S and -1 or 0)
            local s = (key.D and 1 or 0) + (key.A and -1 or 0)
            forward, strafe = f, s
        else
            local mv = getMoveVectorMobile() -- x=strafe, y=forward
            forward = math.max(0, mv.Y)      -- block backward on mobile
            strafe = mv.X
        end

        -- Build world velocity from torso basis
        local basis = hrp.CFrame
        local dir = (basis.LookVector * forward) + (basis.RightVector * strafe)
        if dir.Magnitude > 1 then dir = dir.Unit end

        linVel.VectorVelocity = dir * speed

        -- Keep state in Freefall so no ground anims sneak in
        if hum:GetState() ~= Enum.HumanoidStateType.Freefall then
            hum:ChangeState(Enum.HumanoidStateType.Freefall)
        end
    end)

    -- Death auto-off
    if deathConn then deathConn:Disconnect() end
    deathConn = hum.Died:Connect(function()
        flying = false
        cleanFlight()
    end)
end

local function stopFlightCore()
    flying = false
    cleanFlight()
end

-- Top bar + panel factory (bar + body in the SAME frame; compact; clips on)
local function buildPanel(name, sizeOffset)
    local panel = Instance.new("Frame")
    panel.Name = name
    panel.AnchorPoint = Vector2.new(0.5,0.5)
    panel.Position = UDim2.new(0.5,0,0.5,0)
    panel.Size = sizeOffset or UDim2.fromOffset(360, 240)
    panel.BackgroundColor3 = C_BODY_A
    panel.ClipsDescendants = true
    panel.Active = true
    panel.Parent = gui
    corner(panel, 12); stroke(panel, 1); gradient(panel, C_BODY_A, C_BODY_B, 90)

    -- Top bar (own color tab)
    local bar = Instance.new("Frame")
    bar.Name = "TopBar"
    bar.BackgroundColor3 = C_TOPBAR
    bar.Size = UDim2.new(1,0,0,36)
    bar.Parent = panel
    corner(bar, 12); stroke(bar, 1)

    -- Panda logo top-left (image has NO corners)
    local panda = Instance.new("ImageLabel")
    panda.BackgroundTransparency = 1
    panda.Image = PANDA
    panda.Size = UDim2.fromOffset(24,24)
    panda.Position = UDim2.new(0,10,0.5,-12)
    panda.Parent = bar

    -- Minimize
    local btnMin = Instance.new("TextButton")
    btnMin.Name = "Minimize"
    btnMin.Size = UDim2.fromOffset(28,24)
    btnMin.Position = UDim2.new(1,-66,0.5,-12)
    btnMin.Text = "-"
    buttonStyle(btnMin)
    btnMin.Parent = bar

    -- Close (text 'x')
    local btnClose = Instance.new("TextButton")
    btnClose.Name = "Close"
    btnClose.Size = UDim2.fromOffset(28,24)
    btnClose.Position = UDim2.new(1,-34,0.5,-12)
    btnClose.Text = "x"
    buttonStyle(btnClose)
    btnClose.Parent = bar

    -- Body
    local body = Instance.new("Frame")
    body.Name = "Body"
    body.BackgroundTransparency = 1
    body.Size = UDim2.new(1,-16,1,-44)
    body.Position = UDim2.new(0,8,0,40)
    body.Parent = panel

    -- Dragging: bar moves the whole panel (merged)
    makePanelDraggable(panel, bar)

    -- Minimize behavior
    btnMin.MouseButton1Click:Connect(function()
        panel.Visible = false
        spawnMini(function()
            panel.Visible = true
        end)
    end)

    -- Close behavior
    btnClose.MouseButton1Click:Connect(function()
        stopFlightCore()
        unbindPCKeys()
        if deathConn then deathConn:Disconnect() end
        gui:Destroy()
        -- If running as a LocalScript instance, optionally: pcall(function() script:Destroy() end)
    end)

    return panel, bar, body
end

-- Device selection UI
local function showDeviceSelect()
    local panel, bar, body = buildPanel("DeviceSelect", UDim2.fromOffset(360, 260))

    -- Center panda (top middle below bar)
    local pandaCenter = Instance.new("ImageLabel")
    pandaCenter.BackgroundTransparency = 1
    pandaCenter.Image = PANDA
    pandaCenter.Size = UDim2.fromOffset(56,56)
    pandaCenter.AnchorPoint = Vector2.new(0.5,0)
    pandaCenter.Position = UDim2.new(0.5,0,0,0)
    pandaCenter.Parent = body

    -- "Choose your device"
    local choose = Instance.new("TextLabel")
    choose.BackgroundTransparency = 1
    choose.Text = "Choose your device"
    choose.Size = UDim2.new(1,0,0,26)
    choose.Position = UDim2.new(0,0,0,60)
    choose.TextScaled = true
    labelTextProps(choose)
    choose.Parent = body

    -- Container for two devices
    local row = Instance.new("Frame")
    row.BackgroundTransparency = 1
    row.Size = UDim2.new(1,0,0,120)
    row.Position = UDim2.new(0,0,0,92)
    row.Parent = body

    local padding = Instance.new("UIPadding", row)
    padding.PaddingLeft = UDim.new(0,8)
    padding.PaddingRight = UDim.new(0,8)

    local list = Instance.new("UIListLayout", row)
    list.FillDirection = Enum.FillDirection.Horizontal
    list.HorizontalAlignment = Enum.HorizontalAlignment.Center
    list.VerticalAlignment = Enum.VerticalAlignment.Center
    list.Padding = UDim.new(0,16)

    local function deviceCell(imgId, title)
        local cell = Instance.new("Frame")
        cell.BackgroundTransparency = 1
        cell.Size = UDim2.new(0.5, -12, 1, 0)
        cell.Parent = row

        local titleLbl = Instance.new("TextLabel")
        titleLbl.BackgroundTransparency = 1
        titleLbl.Text = title
        titleLbl.TextScaled = true
        titleLbl.Size = UDim2.new(1,0,0,22)
        titleLbl.Parent = cell
        labelTextProps(titleLbl)

        local img = Instance.new("ImageButton")
        img.BackgroundTransparency = 1
        img.Image = imgId
        img.AnchorPoint = Vector2.new(0.5,0)
        img.Position = UDim2.new(0.5,0,0,26)
        img.Size = UDim2.new(1,-8,1,-30) -- compact, contained
        img.Parent = cell
        return img
    end

    local pcBtn = deviceCell(PCIMG, "PC/Emulator")
    local phBtn = deviceCell(PHIMG, "Phone")

    pcBtn.MouseButton1Click:Connect(function()
        panel:Destroy()
        mode = "pc"
        showFlyUI(true)
    end)

    phBtn.MouseButton1Click:Connect(function()
        panel:Destroy()
        mode = "phone"
        showFlyUI(false)
    end)
end

-- Fly UI (shared for PC/Mobile with PC hint + PC logo on top of body)
function showFlyUI(isPC)
    local panel, bar, body = buildPanel(isPC and "PCFly" or "MobileFly", UDim2.fromOffset(360, 240))

    -- PC logo at top-middle of body
    if isPC then
        local pcLogo = Instance.new("ImageLabel")
        pcLogo.BackgroundTransparency = 1
        pcLogo.Image = PCIMG
        pcLogo.Size = UDim2.fromOffset(26,26)
        pcLogo.AnchorPoint = Vector2.new(0.5,0)
        pcLogo.Position = UDim2.new(0.5,0,0,0)
        pcLogo.Parent = body
    end

    -- Controls row
    local row = Instance.new("Frame")
    row.BackgroundTransparency = 1
    row.Size = UDim2.new(1, -16, 0, 34)
    row.Position = UDim2.new(0,8,0,40)
    row.Parent = body

    local uiList = Instance.new("UIListLayout", row)
    uiList.FillDirection = Enum.FillDirection.Horizontal
    uiList.HorizontalAlignment = Enum.HorizontalAlignment.Left
    uiList.VerticalAlignment = Enum.VerticalAlignment.Center
    uiList.Padding = UDim.new(0,8)

    local function addSpacer(w) local s=Instance.new("Frame"); s.BackgroundTransparency=1; s.Size=UDim2.fromOffset(w,1); s.Parent=row end

    -- Speed label
    local spLbl = Instance.new("TextLabel")
    spLbl.BackgroundTransparency = 1
    spLbl.Text = "Speed"
    spLbl.Size = UDim2.fromOffset(80, 34)
    spLbl.TextScaled = true
    labelTextProps(spLbl)
    spLbl.Parent = row

    -- Speed input
    local spBox = Instance.new("TextBox")
    spBox.Text = tostring(speed)
    spBox.Size = UDim2.fromOffset(70,34)
    buttonStyle(spBox)
    spBox.ClearTextOnFocus = false
    spBox.Parent = row

    addSpacer(8)

    -- Fly toggle
    local flyBtn = Instance.new("TextButton")
    flyBtn.Text = "Fly On"
    flyBtn.Size = UDim2.fromOffset(90,34)
    buttonStyle(flyBtn)
    flyBtn.Parent = row

    -- PC hint
    if isPC then
        local hint = Instance.new("TextLabel")
        hint.BackgroundTransparency = 1
        hint.Text = "Press E to toggle fly on and off"
        hint.Size = UDim2.new(1, -16, 0, 26)
        hint.Position = UDim2.new(0,8,0,84)
        hint.TextScaled = true
        labelTextProps(hint)
        hint.Parent = body
    end

    -- Bindings
    local char = player.Character or player.CharacterAdded:Wait()
    local hum = char:WaitForChild("Humanoid")

    if isPC then bindPCKeys() else unbindPCKeys() end
    startFlightCore() -- prepare core (attachments, loop); flying toggles via state

    flyBtn.MouseButton1Click:Connect(function()
        flying = not flying
        flyBtn.Text = flying and "Fly Off" or "Fly On"
    end)

    spBox.FocusLost:Connect(function(enter)
        if enter then
            local v = tonumber(spBox.Text)
            if v and v > 0 then speed = v else speed = 16; spBox.Text = "16" end
        end
    end)
end

-- Kickoff
showDeviceSelect()
