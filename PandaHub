-- TPUA v6 - Intense Teleport + Live Strength/Damping + Brookhaven Vehicles Addon
-- LocalScript (StarterPlayerScripts)

-- Services
local Players       = game:GetService("Players")
local RunService    = game:GetService("RunService")
local TweenService  = game:GetService("TweenService")

local LP = Players.LocalPlayer

-- Avoid duplicates
local GUI_NAME = "TPUA_Panel"
local pg = LP:WaitForChild("PlayerGui", 5)
if not pg then return end
if pg:FindFirstChild(GUI_NAME) then return end

-- STATE
local enabled           = false
local minimized         = false
local targetName        = ""
local connections       = {}            -- general connections
local partConns         = {}            -- [BasePart] = {connections}
local candidateParts    = {}            -- [BasePart] = true
local createdForces     = {}            -- [BasePart] = BodyPosition
local highlights        = {}            -- [BasePart] = Highlight (parts)
local highlightFolder   = nil
local heartbeatConn     = nil
local toggleBtn

-- Brookhaven vehicle addon state
local vehiclesFolder    = workspace:FindFirstChild("vehicles") or workspace:FindFirstChild("Vehicles")
local vehicleModels     = {}            -- [Model] = true
local vehicleHighlights = {}            -- [Model] = Highlight
local vehicleConns      = {}            -- [Model] = {connections}

-- CONFIG (UI + Visuals)
local COLOR_OFF   = Color3.fromRGB(30, 120, 255)
local COLOR_ON    = Color3.fromRGB(230, 45, 45)
local H_OUTLINE   = Color3.fromRGB(30, 120, 255)
local H_FILL      = Color3.fromRGB(150, 195, 255)
local H_FILL_T    = 0.7
local BG_PRIMARY  = Color3.fromRGB(24, 24, 28)
local BG_SECOND   = Color3.fromRGB(36, 36, 42)
local TEXT_WHITE  = Color3.new(1, 1, 1)
local CORNER      = UDim.new(0, 8)
local BTN_CORNER  = UDim.new(0, 6)

-- Intensity defaults (v5 baseline)
local P_NORMAL_DEFAULT  = 250000
local D_NORMAL_DEFAULT  = 900
local P_VEHICLE_DEFAULT = 800000     -- stronger for vehicles
local D_VEHICLE_DEFAULT = 600        -- lower damping for snappier grab

-- Maintain feel ratios when user customizes values
local VEHICLE_P_RATIO = P_VEHICLE_DEFAULT / P_NORMAL_DEFAULT   -- 3.2
local VEHICLE_D_RATIO = D_VEHICLE_DEFAULT / D_NORMAL_DEFAULT   -- ~0.6667

-- Live-adjustable values (nil = use defaults)
local customP = nil   -- affects both normal and vehicles, preserving ratio
local customD = nil   -- affects both normal and vehicles, preserving ratio

-- Derived getters so we always apply the right tuning
local function getP(isVehicle)
    local base = customP or P_NORMAL_DEFAULT
    if isVehicle then
        return (customP and (customP * VEHICLE_P_RATIO)) or P_VEHICLE_DEFAULT
    end
    return base
end
local function getD(isVehicle)
    local base = customD or D_NORMAL_DEFAULT
    if isVehicle then
        return (customD and (customD * VEHICLE_D_RATIO)) or D_VEHICLE_DEFAULT
    end
    return base
end

local MAXFORCE_ALL = Vector3.new(math.huge, math.huge, math.huge)

-- UTILITIES
local function isCharacterPart(part)
    local model = part:FindFirstAncestorOfClass("Model")
    return model and model:FindFirstChildOfClass("Humanoid") ~= nil
end

local function partUsable(part)
    return part and part:IsA("BasePart") and part.Parent and not isCharacterPart(part)
end

local function shouldConsider(part)
    return partUsable(part) and not part.Anchored
end

local function ensureHighlightFolder()
    if not highlightFolder or not highlightFolder.Parent then
        highlightFolder = Instance.new("Folder")
        highlightFolder.Name = "TPUA_LocalHighlights"
        highlightFolder.Parent = workspace
    end
    return highlightFolder
end

local function setToggleVisuals(btn)
    btn.Text = enabled and "TPUA: On" or "TPUA: Off"
    btn.BackgroundColor3 = enabled and COLOR_ON or COLOR_OFF
end

local function resolveTarget(name)
    if not name or name == "" then return nil end
    local exact = Players:FindFirstChild(name)
    if exact then return exact end
    local lower = name:lower()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Name:lower():sub(1, #lower) == lower then
            return plr
        end
    end
    return nil
end

-- PART HIGHLIGHTS (for general unanchored parts)
local function addPartHighlight(part)
    if not enabled then return end
    if highlights[part] then return end
    local folder = ensureHighlightFolder()
    local h = Instance.new("Highlight")
    h.Name = "TPUA_Highlight_Part"
    h.Adornee = part
    h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    h.OutlineColor = H_OUTLINE
    h.OutlineTransparency = 0
    h.FillColor = H_FILL
    h.FillTransparency = H_FILL_T
    h.Parent = folder
    highlights[part] = h
end

local function removePartHighlight(part)
    local h = highlights[part]
    if h then
        highlights[part] = nil
        pcall(function() h:Destroy() end)
    end
end

-- VEHICLE HELPERS
local function modelHasUnanchoredBasePart(model)
    for _, d in ipairs(model:GetDescendants()) do
        if d:IsA("BasePart") and partUsable(d) and not d.Anchored then
            return true
        end
    end
    return false
end

local function isInVehiclesFolder(instance)
    if not vehiclesFolder then return false end
    return instance:IsDescendantOf(vehiclesFolder)
end

-- VEHICLE HIGHLIGHTS (model-level)
local function addVehicleHighlight(model)
    if not enabled then return end
    if vehicleHighlights[model] then return end
    if not modelHasUnanchoredBasePart(model) then return end
    local folder = ensureHighlightFolder()
    local h = Instance.new("Highlight")
    h.Name = "TPUA_Highlight_Vehicle"
    h.Adornee = model
    h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    h.OutlineColor = H_OUTLINE
    h.OutlineTransparency = 0
    h.FillColor = H_FILL
    h.FillTransparency = H_FILL_T
    h.Parent = folder
    vehicleHighlights[model] = h
end

local function removeVehicleHighlight(model)
    local h = vehicleHighlights[model]
    if h then
        vehicleHighlights[model] = nil
        pcall(function() h:Destroy() end)
    end
end

local function refreshVehicleHighlight(model)
    if not enabled then
        removeVehicleHighlight(model)
        return
    end
    if modelHasUnanchoredBasePart(model) then
        addVehicleHighlight(model)
    else
        removeVehicleHighlight(model)
    end
end

-- FORCES
local function clearForces()
    for part, bp in pairs(createdForces) do
        if bp and bp.Parent then pcall(function() bp:Destroy() end) end
        createdForces[part] = nil
    end
end

-- CONNECTION MGMT
local function disconnectPartConns(part)
    local lst = partConns[part]
    if lst then
        for _, c in ipairs(lst) do pcall(function() c:Disconnect() end) end
        partConns[part] = nil
    end
end

-- CANDIDATE MGMT
local function removeCandidate(part)
    candidateParts[part] = nil
    disconnectPartConns(part)
    local bp = createdForces[part]
    if bp then
        if bp.Parent then pcall(function() bp:Destroy() end) end
        createdForces[part] = nil
    end
    removePartHighlight(part)
end

local function trackPart(part)
    if enabled and shouldConsider(part) then
        candidateParts[part] = true
        addPartHighlight(part)
    else
        removeCandidate(part)
    end
end

local function connectPerPart(part)
    if partConns[part] then return end
    local lst = {}
    lst[#lst+1] = part:GetPropertyChangedSignal("Anchored"):Connect(function()
        trackPart(part)
        if isInVehiclesFolder(part) then
            local model = part:FindFirstAncestorOfClass("Model")
            if model then refreshVehicleHighlight(model) end
        end
    end)
    lst[#lst+1] = part.AncestryChanged:Connect(function()
        trackPart(part)
        if isInVehiclesFolder(part) then
            local model = part:FindFirstAncestorOfClass("Model")
            if model then refreshVehicleHighlight(model) end
        end
    end)
    partConns[part] = lst
end

-- GLOBAL DYNAMIC DETECTION
table.insert(connections, workspace.DescendantAdded:Connect(function(obj)
    if obj:IsA("BasePart") then
        connectPerPart(obj)
        trackPart(obj)
    end
end))
table.insert(connections, workspace.DescendantRemoving:Connect(function(obj)
    if obj:IsA("BasePart") then
        removeCandidate(obj)
    end
end))

-- VEHICLES ADDON (Brookhaven-style folder)
local function disconnectVehicleModel(model)
    if vehicleConns[model] then
        for _, c in ipairs(vehicleConns[model]) do pcall(function() c:Disconnect() end) end
        vehicleConns[model] = nil
    end
    vehicleModels[model] = nil
    removeVehicleHighlight(model)
end

local function connectVehicleModel(model)
    if vehicleConns[model] then return end
    vehicleModels[model] = true
    local lst = {}
    lst[#lst+1] = model.DescendantAdded:Connect(function(obj)
        if obj:IsA("BasePart") then
            connectPerPart(obj)
            if enabled then
                if not obj.Anchored then addPartHighlight(obj) end
                refreshVehicleHighlight(model)
            end
        end
    end)
    lst[#lst+1] = model.DescendantRemoving:Connect(function(obj)
        if obj:IsA("BasePart") and enabled then
            refreshVehicleHighlight(model)
        end
    end)
    lst[#lst+1] = model.AncestryChanged:Connect(function(_, parent)
        if not parent then
            disconnectVehicleModel(model)
        end
    end)
    vehicleConns[model] = lst
    if enabled then refreshVehicleHighlight(model) end
end

local function initVehiclesFolder(folder)
    if not folder then return end
    -- existing children
    for _, child in ipairs(folder:GetChildren()) do
        if child:IsA("Model") then
            connectVehicleModel(child)
        end
    end
    -- live add/remove
    table.insert(connections, folder.ChildAdded:Connect(function(child)
        if child:IsA("Model") then
            connectVehicleModel(child)
        end
    end))
    table.insert(connections, folder.ChildRemoved:Connect(function(child)
        if child:IsA("Model") then
            disconnectVehicleModel(child)
        end
    end))
end

initVehiclesFolder(vehiclesFolder)

-- Also detect vehicles folder appearing/disappearing at runtime
table.insert(connections, workspace.ChildAdded:Connect(function(child)
    if not vehiclesFolder and (child.Name == "vehicles" or child.Name == "Vehicles") and child:IsA("Folder") then
        vehiclesFolder = child
        initVehiclesFolder(vehiclesFolder)
    end
end))
table.insert(connections, workspace.ChildRemoved:Connect(function(child)
    if vehiclesFolder and child == vehiclesFolder then
        -- cleanup all vehicle state
        for model in pairs(vehicleModels) do
            disconnectVehicleModel(model)
        end
        vehiclesFolder = nil
    end
end))

-- INITIAL per-part hookup (highlights only while enabled)
for _, obj in ipairs(workspace:GetDescendants()) do
    if obj:IsA("BasePart") then
        connectPerPart(obj)
    end
end

-- UI BUILD
local screenGui = Instance.new("ScreenGui")
screenGui.Name = GUI_NAME
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Parent = pg

local main = Instance.new("Frame")
main.Name = "Main"
main.Size = UDim2.new(0, 320, 0, 160)
main.Position = UDim2.new(0.5, -160, 0.15, 0)
main.BackgroundColor3 = BG_PRIMARY
main.ClipsDescendants = true
main.Parent = screenGui
do
    Instance.new("UICorner", main).CornerRadius = CORNER
    local s = Instance.new("UIStroke", main); s.Thickness = 1; s.Color = Color3.fromRGB(60, 60, 70)
end
local padding = Instance.new("UIPadding", main)
padding.PaddingLeft = UDim.new(0, 8)
padding.PaddingRight = UDim.new(0, 8)
padding.PaddingTop = UDim.new(0, 8)
padding.PaddingBottom = UDim.new(0, 8)

local topBar = Instance.new("Frame")
topBar.Name = "TopBar"
topBar.BackgroundColor3 = BG_SECOND
topBar.Size = UDim2.new(1, 0, 0, 28)
topBar.Parent = main
Instance.new("UICorner", topBar).CornerRadius = BTN_CORNER

local title = Instance.new("TextLabel")
title.Name = "Title"
title.BackgroundTransparency = 1
title.Size = UDim2.new(1, -68, 1, 0)
title.Position = UDim2.new(0, 8, 0, 0)
title.Text = "TPUA"
title.Font = Enum.Font.GothamBold
title.TextColor3 = TEXT_WHITE
title.TextScaled = true
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = topBar
Instance.new("UITextSizeConstraint", title).MaxTextSize = 20

local btnClose = Instance.new("TextButton")
btnClose.Name = "Close"
btnClose.Size = UDim2.new(0, 28, 0, 24)
btnClose.Position = UDim2.new(1, -28, 0.5, -12)
btnClose.BackgroundColor3 = BG_PRIMARY
btnClose.Text = "X"
btnClose.Font = Enum.Font.GothamBold
btnClose.TextColor3 = TEXT_WHITE
btnClose.TextScaled = true
btnClose.AutoButtonColor = true
btnClose.Parent = topBar
Instance.new("UICorner", btnClose).CornerRadius = BTN_CORNER

local btnMin = Instance.new("TextButton")
btnMin.Name = "Minimize"
btnMin.Size = UDim2.new(0, 28, 0, 24)
btnMin.Position = UDim2.new(1, -60, 0.5, -12)
btnMin.BackgroundColor3 = BG_PRIMARY
btnMin.Text = "-"
btnMin.Font = Enum.Font.GothamBold
btnMin.TextColor3 = TEXT_WHITE
btnMin.TextScaled = true
btnMin.AutoButtonColor = true
btnMin.Parent = topBar
Instance.new("UICorner", btnMin).CornerRadius = BTN_CORNER

local content = Instance.new("Frame")
content.Name = "Content"
content.BackgroundTransparency = 1
content.Size = UDim2.new(1, 0, 1, -36)
content.Position = UDim2.new(0, 0, 0, 32)
content.ClipsDescendants = true
content.Parent = main

-- Row 1: Username + Toggle
local row1 = Instance.new("Frame")
row1.Name = "Row1"
row1.BackgroundTransparency = 1
row1.Size = UDim2.new(1, 0, 0, 40)
row1.Parent = content
local row1Layout = Instance.new("UIListLayout", row1)
row1Layout.FillDirection = Enum.FillDirection.Horizontal
row1Layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
row1Layout.VerticalAlignment = Enum.VerticalAlignment.Center
row1Layout.Padding = UDim.new(0, 8)

local userBox = Instance.new("TextBox")
userBox.Name = "Username"
userBox.Size = UDim2.new(0.6, -4, 1, 0)
userBox.BackgroundColor3 = BG_SECOND
userBox.Text = ""
userBox.PlaceholderText = "Target username"
userBox.Font = Enum.Font.GothamBold
userBox.TextColor3 = TEXT_WHITE
userBox.PlaceholderColor3 = Color3.fromRGB(180, 180, 190)
userBox.TextScaled = true
userBox.ClearTextOnFocus = false
userBox.Parent = row1
do
    Instance.new("UICorner", userBox).CornerRadius = BTN_CORNER
    local s = Instance.new("UIStroke", userBox); s.Thickness = 1; s.Color = Color3.fromRGB(70, 70, 80)
    Instance.new("UITextSizeConstraint", userBox).MaxTextSize = 18
end

toggleBtn = Instance.new("TextButton")
toggleBtn.Name = "Toggle"
toggleBtn.Size = UDim2.new(0.4, -4, 1, 0)
toggleBtn.BackgroundColor3 = COLOR_OFF
toggleBtn.Text = "TPUA: Off"
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.TextColor3 = TEXT_WHITE
toggleBtn.TextScaled = true
toggleBtn.AutoButtonColor = true
toggleBtn.Parent = row1
do
    Instance.new("UICorner", toggleBtn).CornerRadius = BTN_CORNER
    local s = Instance.new("UIStroke", toggleBtn); s.Thickness = 1; s.Color = Color3.fromRGB(70, 70, 80)
    Instance.new("UITextSizeConstraint", toggleBtn).MaxTextSize = 18
end

-- Row 2: Strength (P) + Damping (D)
local row2 = Instance.new("Frame")
row2.Name = "Row2"
row2.BackgroundTransparency = 1
row2.Size = UDim2.new(1, 0, 0, 40)
row2.Position = UDim2.new(0, 0, 0, 44)
row2.Parent = content
local row2Layout = Instance.new("UIListLayout", row2)
row2Layout.FillDirection = Enum.FillDirection.Horizontal
row2Layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
row2Layout.VerticalAlignment = Enum.VerticalAlignment.Center
row2Layout.Padding = UDim.new(0, 8)

local strengthBox = Instance.new("TextBox")
strengthBox.Name = "StrengthP"
strengthBox.Size = UDim2.new(0.5, -4, 1, 0)
strengthBox.BackgroundColor3 = BG_SECOND
strengthBox.Text = ""
strengthBox.PlaceholderText = "Strength P (e.g. 250000)"
strengthBox.Font = Enum.Font.GothamBold
strengthBox.TextColor3 = TEXT_WHITE
strengthBox.PlaceholderColor3 = Color3.fromRGB(180,180,190)
strengthBox.TextScaled = true
strengthBox.ClearTextOnFocus = false
strengthBox.Parent = row2
do
    Instance.new("UICorner", strengthBox).CornerRadius = BTN_CORNER
    local s = Instance.new("UIStroke", strengthBox); s.Thickness = 1; s.Color = Color3.fromRGB(70,70,80)
    Instance.new("UITextSizeConstraint", strengthBox).MaxTextSize = 18
end

local dampingBox = Instance.new("TextBox")
dampingBox.Name = "DampingD"
dampingBox.Size = UDim2.new(0.5, -4, 1, 0)
dampingBox.BackgroundColor3 = BG_SECOND
dampingBox.Text = ""
dampingBox.PlaceholderText = "Damping D (e.g. 900)"
dampingBox.Font = Enum.Font.GothamBold
dampingBox.TextColor3 = TEXT_WHITE
dampingBox.PlaceholderColor3 = Color3.fromRGB(180,180,190)
dampingBox.TextScaled = true
dampingBox.ClearTextOnFocus = false
dampingBox.Parent = row2
do
    Instance.new("UICorner", dampingBox).CornerRadius = BTN_CORNER
    local s = Instance.new("UIStroke", dampingBox); s.Thickness = 1; s.Color = Color3.fromRGB(70,70,80)
    Instance.new("UITextSizeConstraint", dampingBox).MaxTextSize = 18
end

-- DRAGGING
do
    local dragging, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true; dragStart = input.Position; startPos = main.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    topBar.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            update(input)
        end
    end)
end

-- MINIMIZE
local expandedSize = main.Size
local minimizedSize = UDim2.new(expandedSize.X.Scale, expandedSize.X.Offset, 0, 36)
local function setMinimized(state)
    minimized = state
    if minimized then
        content.Visible = false
        TweenService:Create(main, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = minimizedSize}):Play()
    else
        TweenService:Create(main, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = expandedSize}):Play()
        task.delay(0.15, function() content.Visible = true end)
    end
end
btnMin.MouseButton1Click:Connect(function() setMinimized(not minimized) end)

-- CLOSE (full cleanup)
local function destroyAll()
    enabled = false
    for _, c in ipairs(connections) do pcall(function() c:Disconnect() end) end
    connections = {}
    if heartbeatConn then pcall(function() heartbeatConn:Disconnect() end) end
    heartbeatConn = nil
    for part in pairs(partConns) do
        for _, c in ipairs(partConns[part]) do pcall(function() c:Disconnect() end) end
        partConns[part] = nil
    end
    clearForces()
    -- clear highlights (parts + vehicles)
    for _, h in pairs(vehicleHighlights) do pcall(function() h:Destroy() end) end
    vehicleHighlights = {}
    for _, h in pairs(highlights) do pcall(function() h:Destroy() end) end
    highlights = {}
    if highlightFolder and highlightFolder.Parent then pcall(function() highlightFolder:Destroy() end) end
    highlightFolder = nil
    if screenGui and screenGui.Parent then screenGui:Destroy() end
end
btnClose.MouseButton1Click:Connect(destroyAll)

-- INPUT hooks
userBox:GetPropertyChangedSignal("Text"):Connect(function()
    targetName = userBox.Text
end)

local function parsePositiveNumber(txt)
    local n = tonumber(txt)
    if n and n > 0 then return n end
    return nil
end

local function applyStrengthFromBox()
    customP = parsePositiveNumber(strengthBox.Text)
end
local function applyDampingFromBox()
    customD = parsePositiveNumber(dampingBox.Text)
end

strengthBox.FocusLost:Connect(function()
    applyStrengthFromBox()
end)
dampingBox.FocusLost:Connect(function()
    applyDampingFromBox()
end)

-- ENABLE/DISABLE
toggleBtn.MouseButton1Click:Connect(function()
    enabled = not enabled
    setToggleVisuals(toggleBtn)
    if enabled then
        ensureHighlightFolder()
        -- sweep current world
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj:IsA("BasePart") then
                connectPerPart(obj)
                trackPart(obj)
            end
        end
        -- refresh vehicle highlights
        if vehiclesFolder then
            for _, model in ipairs(vehiclesFolder:GetChildren()) do
                if model:IsA("Model") then
                    connectVehicleModel(model)
                    refreshVehicleHighlight(model)
                end
            end
        end
    else
        clearForces()
        -- remove highlights but keep connections for instant resume
        for _, h in pairs(vehicleHighlights) do pcall(function() h:Destroy() end) end
        vehicleHighlights = {}
        for _, h in pairs(highlights) do pcall(function() h:Destroy() end) end
        highlights = {}
        if highlightFolder and highlightFolder.Parent then pcall(function() highlightFolder:Destroy() end) end
        highlightFolder = nil
    end
end)

-- HEARTBEAT: apply forces (intense, with special vehicle tuning)
heartbeatConn = RunService.Heartbeat:Connect(function()
    if not enabled then return end

    ensureHighlightFolder()

    local target = resolveTarget(targetName)
    local head = target and target.Character and target.Character:FindFirstChild("Head")
    if not head then
        -- maintain only highlights while no target
        for part in pairs(candidateParts) do
            if not shouldConsider(part) then
                removeCandidate(part)
            else
                if not highlights[part] then addPartHighlight(part) end
            end
        end
        -- keep vehicle highlights synced
        if vehiclesFolder then
            for model in pairs(vehicleModels) do
                refreshVehicleHighlight(model)
            end
        end
        return
    end

    local headPos = head.Position

    for part in pairs(candidateParts) do
        if not shouldConsider(part) then
            removeCandidate(part)
        else
            -- highlight upkeep
            if not highlights[part] then addPartHighlight(part) end

            local isVehicle = isInVehiclesFolder(part)
            local bp = createdForces[part]
            if not bp or not bp.Parent then
                bp = Instance.new("BodyPosition")
                bp.Name = "tpuaBP"
                bp.MaxForce = MAXFORCE_ALL
                bp.D = getD(isVehicle)
                bp.P = getP(isVehicle)
                bp.Position = headPos
                bp.Parent = part
                createdForces[part] = bp
            else
                -- continuously reflect current tuning and target
                bp.MaxForce = MAXFORCE_ALL
                bp.D = getD(isVehicle)
                bp.P = getP(isVehicle)
                bp.Position = headPos
            end

            -- Optional: kill drift for ultra-snap
            -- pcall(function() part.AssemblyLinearVelocity = Vector3.zero end)
            -- pcall(function() part.AssemblyAngularVelocity = Vector3.zero end)
        end
    end

    -- keep vehicle model highlights synced
    if vehiclesFolder then
        for model in pairs(vehicleModels) do
            refreshVehicleHighlight(model)
        end
    end
end)

-- DEATH HANDLING: disable and clean forces/highlights; UI persists and retains custom P/D
local function bindDeath(char)
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    if not hum then return end
    table.insert(connections, hum.Died:Connect(function()
        enabled = false
        setToggleVisuals(toggleBtn)
        clearForces()
        -- clear visuals
        for _, h in pairs(vehicleHighlights) do pcall(function() h:Destroy() end) end
        vehicleHighlights = {}
        for _, h in pairs(highlights) do pcall(function() h:Destroy() end) end
        highlights = {}
        if highlightFolder and highlightFolder.Parent then pcall(function() highlightFolder:Destroy() end) end
        highlightFolder = nil
    end))
end
if LP.Character then bindDeath(LP.Character) end
table.insert(connections, LP.CharacterAdded:Connect(bindDeath))
