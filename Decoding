-- Hilton | ArmLock B (Disable Animate + Hold Pose)
-- Client-only. Run once to lock, run again to restore Animate and unlock.

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local G = getgenv and getgenv() or _G
G.__ArmLockB = G.__ArmLockB or { active=false, conns={}, joints=nil, stepName="ArmLockB_Step", prevAnimateState=nil, animateRef=nil }

local CONFIG = {
    SHOULDER_DEG = 70,
    LOG = true,
}
local function log(...) if CONFIG.LOG then print("[ArmLockB]", ...) end end

local function getCharHum()
    local plr = Players.LocalPlayer
    local char = plr.Character or plr.CharacterAdded:Wait()
    local hum = char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid")
    return char, hum
end

local function resolveShoulder(char)
    local rua = char:FindFirstChild("RightUpperArm")
    if rua then
        local sh = rua:FindFirstChild("RightShoulder")
            or (char:FindFirstChild("UpperTorso") and char.UpperTorso:FindFirstChild("RightShoulder"))
        if sh and sh:IsA("Motor6D") then return sh end
    end
    local torso = char:FindFirstChild("Torso")
    local shR6 = torso and torso:FindFirstChild("Right Shoulder")
    if shR6 and shR6:IsA("Motor6D") then return shR6 end
    return nil
end

local function findAnimate(char)
    return char:FindFirstChild("Animate")
end

local function cleanup()
    pcall(function() RunService:UnbindFromRenderStep(G.__ArmLockB.stepName) end)
    for i=#G.__ArmLockB.conns,1,-1 do pcall(function() G.__ArmLockB.conns[i]:Disconnect() end) ; G.__ArmLockB.conns[i]=nil end
    if G.__ArmLockB.joints and G.__ArmLockB.joints.s then pcall(function() G.__ArmLockB.joints.s.Transform = CFrame.new() end) end
    if G.__ArmLockB.animateRef and G.__ArmLockB.prevAnimateState ~= nil then
        pcall(function() G.__ArmLockB.animateRef.Disabled = G.__ArmLockB.prevAnimateState end)
    end
    G.__ArmLockB.joints=nil
    G.__ArmLockB.animateRef=nil
    G.__ArmLockB.prevAnimateState=nil
    G.__ArmLockB.active=false
    log("Restored Animate and cleaned up.")
end

if G.__ArmLockB.active then cleanup() return end
G.__ArmLockB.active=true

local char, hum = getCharHum()
local joints = { s = resolveShoulder(char) }
if not joints.s then
    log("No shoulder joint found.")
    return cleanup()
end
G.__ArmLockB.joints = joints

-- Disable Animate (store prior state)
local animate = findAnimate(char)
if animate then
    G.__ArmLockB.animateRef = animate
    G.__ArmLockB.prevAnimateState = animate.Disabled
    animate.Disabled = true
    -- Stop any already-playing tracks
    for _,track in ipairs(hum:GetPlayingAnimationTracks()) do pcall(function() track:Stop(0) end) end
    log("Animate disabled; tracks stopped.")
else
    log("No Animate script found in character (already disabled or custom rig).")
end

local SHOULDER_ANG = CFrame.Angles(math.rad(-CONFIG.SHOULDER_DEG), 0, 0)
local PRIORITY = (Enum.RenderPriority.Last.Value + 1)

RunService:BindToRenderStep(G.__ArmLockB.stepName, PRIORITY, function()
    if not joints.s or not joints.s.Parent then
        local c = Players.LocalPlayer.Character
        if c then joints.s = resolveShoulder(c) end
        if not joints.s then return end
    end
    joints.s.Transform = SHOULDER_ANG
end)

-- Respawn handling: re-disable Animate and re-resolve joint
table.insert(G.__ArmLockB.conns, Players.LocalPlayer.CharacterAdded:Connect(function(newChar)
    task.wait(0.1)
    local newAnimate = findAnimate(newChar)
    if newAnimate then
        G.__ArmLockB.animateRef = newAnimate
        G.__ArmLockB.prevAnimateState = newAnimate.Disabled
        newAnimate.Disabled = true
    end
    joints.s = resolveShoulder(newChar)
end))

log("Locked right arm; Animate disabled.")
