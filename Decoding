--[[
Dense CFrame Player â€” client-only, verbose logging
- Writes ALL Motor6D.Transforms from your captured CFrames every frame (no server needed).
- Disables Animate during playback; restores afterward.
- Loud console logging at each critical step + per-second frame ticker.
- Lists mapped motors, missing joints, and any write errors.
- Includes a 1s "Sanity Test" to confirm Transform writes visibly affect a limb.
]]

-- ======= CONFIG =======
local DEFAULT_DURATION = 5.0 -- seconds
local GUI_NAME         = "DenseCFramePlayer_UI"
local DEBUG_LOG        = true      -- master toggle for prints
local TRACE_FRAMES_S   = 1.0       -- print one frame line each N seconds; set to 0 to silence
local SHOW_NOTIFS      = true

-- ======= YOUR CAPTURED DATA =======
local POSE_DATA = {
    note   = "Sparse updates over one loop",
    schema = "sparse+base",
    fps    = 30,
    rig    = "R15",
    joints = {
        "LeftAnkle","LeftElbow","LeftHip","LeftKnee","LeftShoulder","LeftWrist",
        "Neck","RightAnkle","RightElbow","RightHip","RightKnee",
        "RightShoulder","RightWrist","Root","Waist"
    },
    base = {
        Waist          = {0,0,0,1,0,0,0,1,0,0,0,1},
        LeftShoulder   = {0,0,0,0.25882,0.96593,-0,-0.96593,0.25882,-0,-0,0,1},
        Root           = {0,0,0,1,0,0,0,1,0,0,0,1},
        Neck           = {0,0,0,1,-0,-0,0,0.25882,0.96593,-0,-0.96593,0.25882},
        RightWrist     = {0,0,0,1,0,0,0,1,0,0,0,1},
        RightElbow     = {0,0,0,1,0,0,0,1,0,0,0,1},
        RightHip       = {0,0,0,1,0,0,0,1,0,0,0,1},
        RightKnee      = {0,0,0,1,0,0,0,1,0,0,0,1},
        LeftKnee       = {0,0,0,1,0,0,0,1,0,0,0,1},
        RightAnkle     = {0,0,0,1,0,0,0,1,0,0,0,1},
        RightShoulder  = {0,0,0.00001,0.21757,-0.95979,-0.17736,0.17736,0.21757,-0.9598,0.9598,0.17736,0.21757},
        LeftWrist      = {0,0,0,1,0,0,0,1,0,0,0,1},
        LeftElbow      = {0,0,0,1,0,0,0,1,0,0,0,1},
        LeftHip        = {0,0,0,1,0,0,0,1,0,0,0,1},
        LeftAnkle      = {0,0,0,1,0,0,0,1,0,0,0,1}
    },
    updates = {
        {
            i = 1,
            t = 0.075,
            joints = {
                Neck          = {0,0,0,1,-0,-0,0,0,1,-0,-1,0},
                LeftShoulder  = {0,0,0,0,1,-0,-1,0,-0,-0,0,1},
                RightShoulder = {0,0,0.00001,0,-1,-0,-0,0,-1,1,0,-0}
            }
        }
    }
}

-- ======= SINGLETON GUARD / CLEANUP =======
getgenv().DENSE_CFRAME_PLAYER = getgenv().DENSE_CFRAME_PLAYER or {}
local S = getgenv().DENSE_CFRAME_PLAYER
if S.stop then pcall(S.stop) end
if S.gui and S.gui.Parent then S.gui:Destroy() end

-- ======= SERVICES =======
local Players     = game:GetService("Players")
local RunService  = game:GetService("RunService")
local StarterGui  = game:GetService("StarterGui")
local lp          = Players.LocalPlayer

-- ======= LOGGING =======
local function log(...)
    if DEBUG_LOG then
        print("[DenseCFrame]", ...)
    end
end
local function wlog(...)
    warn("[DenseCFrame]", ...)
end
local function notify(title, text, dur)
    if not SHOW_NOTIFS then return end
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = title, Text = text, Duration = dur or 2
        })
    end)
end

-- ======= UTIL =======
local function waitForCharacter(plr)
    local ch = plr.Character
    if ch and ch.Parent then return ch end
    log("Waiting for Character...")
    return plr.CharacterAdded:Wait()
end

local function cfFromArray(a)
    -- a must be 12 numbers: pos(3) + rotation matrix(9)
    if type(a) ~= "table" or #a ~= 12 then
        return CFrame.identity
    end
    return CFrame.new(unpack(a))
end

local function trySetTransform(m, cf)
    local ok, err = pcall(function() m.Transform = cf end)
    if not ok then
        wlog("Set Transform FAILED for", m.Name, "error:", err)
        return false, err
    end
    return true
end

local function mapMotors(char)
    local t, count = {}, 0
    for _, d in ipairs(char:GetDescendants()) do
        if d:IsA("Motor6D") then
            t[d.Name] = d
            count += 1
        end
    end
    log("Mapped", count, "Motor6D(s):")
    for name, _ in pairs(t) do
        log("  -", name)
    end
    return t
end

local function applyPose(motors, pose)
    local applied, missing = 0, 0
    for joint, arr in pairs(pose) do
        local m = motors[joint]
        if m then
            local ok = trySetTransform(m, cfFromArray(arr))
            if ok then applied += 1 end
        else
            missing += 1
        end
    end
    return applied, missing
end

local function clearTransforms(motors)
    local cleared = 0
    for _, m in pairs(motors) do
        if m.Transform ~= CFrame.identity then
            m.Transform = CFrame.identity
            cleared += 1
        end
    end
    log("Cleared transforms on", cleared, "motors.")
end

local function getAnimate(char)
    return char:FindFirstChild("Animate")
end

-- Build dense frames: base + sparse updates -> full pose per frame
local function buildDenseFrames(data)
    local fps = (data.fps and data.fps > 0) and data.fps or 30
    local maxI = 1
    for _, u in ipairs(data.updates or {}) do
        if u.i and u.i > maxI then maxI = u.i end
    end
    local totalFrames = math.max(1, maxI)

    local buckets = {}
    for _, u in ipairs(data.updates or {}) do
        if u.i then
            buckets[u.i] = buckets[u.i] or {}
            table.insert(buckets[u.i], u)
        end
    end

    local current = {}
    for j, arr in pairs(data.base or {}) do current[j] = arr end

    local dense = {}
    for f = 1, totalFrames do
        if buckets[f] then
            for _, u in ipairs(buckets[f]) do
                for j, arr in pairs(u.joints or {}) do
                    current[j] = arr
                end
            end
        end
        local framePose = {}
        for j, arr in pairs(current) do framePose[j] = arr end
        dense[f] = framePose
    end

    log("Built dense frames:",
        "fps =", fps,
        "frames =", totalFrames,
        "frameTime =", (1/fps)
    )
    return dense, totalFrames, (1 / fps)
end

-- ======= RUNNER =======
local Runner = {
    conn = nil,
    playing = false,
    deadline = 0,
    motors = nil,
    char = nil,
    humanoid = nil,
    animate = nil,
    animateWasDisabled = nil,
    dense = nil,
    totalFrames = 1,
    frameTime = 1/30,
    startClock = 0,
    lastTickLog = 0,
}

function Runner:disableAnimate()
    self.animate = getAnimate(self.char)
    if self.animate and self.animate:IsA("LocalScript") then
        self.animateWasDisabled = self.animate.Disabled
        self.animate.Disabled = true
        log("Animate disabled.")
    else
        log("Animate script not found; nothing to disable.")
    end
end

function Runner:restoreAnimate()
    if self.motors then clearTransforms(self.motors) end
    if self.animate and self.animate.Parent then
        if self.animateWasDisabled ~= nil then
            self.animate.Disabled = self.animateWasDisabled
        end
        self.animate.Disabled = false
        log("Animate restored.")
    end
end

function Runner:validateRig()
    local rigType = self.humanoid and self.humanoid.RigType and self.humanoid.RigType.Name or "Unknown"
    log("RigType =", rigType)
    -- Report any expected joints missing from POSE_DATA
    local expected = {}
    for _, jn in ipairs(POSE_DATA.joints or {}) do expected[jn] = true end
    local missingList = {}
    for jn, _ in pairs(expected) do
        if not self.motors[jn] then table.insert(missingList, jn) end
    end
    if #missingList > 0 then
        wlog("MISSING JOINTS in rig (will be skipped):")
        for _, jn in ipairs(missingList) do wlog("  -", jn) end
    else
        log("All expected joints present.")
    end
end

function Runner:start(duration)
    if self.playing then self:stop(true) end

    self.char = waitForCharacter(lp)
    self.humanoid = self.char:FindFirstChildOfClass("Humanoid")
    self.motors = mapMotors(self.char)
    self:validateRig()

    self.dense, self.totalFrames, self.frameTime = buildDenseFrames(POSE_DATA)

    self:disableAnimate()
    if self.humanoid then
        pcall(function() self.humanoid.AutoRotate = false end)
    end

    self.startClock = os.clock()
    self.deadline = self.startClock + (tonumber(duration) or DEFAULT_DURATION)
    self.lastTickLog = self.startClock
    self.playing = true

    log("=== START PLAYBACK === duration =", duration or DEFAULT_DURATION,
        "frames =", self.totalFrames, "frameTime =", self.frameTime)

    local applied, missing = applyPose(self.motors, self.dense[1])
    log("Applied first frame. jointsApplied =", applied, "missing =", missing)

    self.conn = RunService.RenderStepped:Connect(function()
        if not self.playing then return end

        local now = os.clock()
        local loopLen  = self.totalFrames * self.frameTime
        local loopT    = (now - self.startClock) % loopLen
        local frameIdx = math.floor(loopT / self.frameTime) + 1
        if frameIdx < 1 then frameIdx = 1 end
        if frameIdx > self.totalFrames then frameIdx = self.totalFrames end

        local a, m = applyPose(self.motors, self.dense[frameIdx])

        if TRACE_FRAMES_S > 0 and (now - self.lastTickLog) >= TRACE_FRAMES_S then
            self.lastTickLog = now
            log(("Frame %d/%d applied. jointsApplied=%d missing=%d")
                :format(frameIdx, self.totalFrames, a, m))
        end

        if now >= self.deadline then
            self:stop(false)
        end
    end)
    notify("CFrame Player", "Playback started", 1.5)
end

function Runner:stop(isInterrupt)
    if self.conn then self.conn:Disconnect() self.conn = nil end
    self.playing = false
    self:restoreAnimate()
    if self.humanoid then
        pcall(function() self.humanoid.AutoRotate = true end)
    end
    log("=== STOP PLAYBACK === interrupt =", isInterrupt == true)
    notify("CFrame Player", "Playback stopped", 1.5)
end

getgenv().DENSE_CFRAME_PLAYER.stop = function()
    if Runner.playing then Runner:stop(true) end
end

Players.LocalPlayer.CharacterAdded:Connect(function(ch)
    if not Runner.playing then
        local a = getAnimate(ch)
        if a then a.Disabled = false end
    end
end)

-- ======= UI =======
local pg  = lp:WaitForChild("PlayerGui")
local gui = Instance.new("ScreenGui")
gui.Name = GUI_NAME
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
gui.Parent = pg
getgenv().DENSE_CFRAME_PLAYER.gui = gui

local frame = Instance.new("Frame")
frame.Name = "Panel"
frame.Size = UDim2.new(0, 240, 0, 130)
frame.Position = UDim2.new(1, -260, 1, -180)
frame.BackgroundColor3 = Color3.fromRGB(20, 20, 24)
frame.BorderSizePixel = 0
frame.Parent = gui
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 8)

local title = Instance.new("TextLabel")
title.BackgroundTransparency = 1
title.Text = "Dense CFrame Player (Client)"
title.Font = Enum.Font.GothamBold
title.TextSize = 14
title.TextColor3 = Color3.fromRGB(255, 200, 80)
title.TextXAlignment = Enum.TextXAlignment.Left
title.Size = UDim2.new(1, -10, 0, 20)
title.Position = UDim2.new(0, 10, 0, 6)
title.Parent = frame

local durLabel = Instance.new("TextLabel")
durLabel.BackgroundTransparency = 1
durLabel.Text = "Duration (s):"
durLabel.Font = Enum.Font.Gotham
durLabel.TextSize = 12
durLabel.TextColor3 = Color3.fromRGB(210, 210, 220)
durLabel.TextXAlignment = Enum.TextXAlignment.Left
durLabel.Size = UDim2.new(0, 90, 0, 20)
durLabel.Position = UDim2.new(0, 10, 0, 28)
durLabel.Parent = frame

local durBox = Instance.new("TextBox")
durBox.Size = UDim2.new(0, 60, 0, 20)
durBox.Position = UDim2.new(0, 100, 0, 28)
durBox.Text = tostring(DEFAULT_DURATION)
durBox.ClearTextOnFocus = false
durBox.Font = Enum.Font.Gotham
durBox.TextSize = 12
durBox.TextColor3 = Color3.fromRGB(255, 255, 255)
durBox.BackgroundColor3 = Color3.fromRGB(36, 36, 42)
durBox.Parent = frame
Instance.new("UICorner", durBox).CornerRadius = UDim.new(0, 6)

local runBtn = Instance.new("TextButton")
runBtn.Size = UDim2.new(0, 220, 0, 28)
runBtn.Position = UDim2.new(0, 10, 0, 56)
runBtn.Text = "Run custom CFrame pose"
runBtn.Font = Enum.Font.GothamBold
runBtn.TextSize = 13
runBtn.TextColor3 = Color3.fromRGB(12, 12, 14)
runBtn.BackgroundColor3 = Color3.fromRGB(255, 200, 80)
runBtn.AutoButtonColor = true
runBtn.Parent = frame
Instance.new("UICorner", runBtn).CornerRadius = UDim.new(0, 6)

local testBtn = Instance.new("TextButton")
testBtn.Size = UDim2.new(0, 220, 0, 28)
testBtn.Position = UDim2.new(0, 10, 0, 90)
testBtn.Text = "1s sanity test (RightShoulder swing)"
testBtn.Font = Enum.Font.GothamBold
testBtn.TextSize = 13
testBtn.TextColor3 = Color3.fromRGB(230, 230, 235)
testBtn.BackgroundColor3 = Color3.fromRGB(60, 160, 255)
testBtn.AutoButtonColor = true
testBtn.Parent = frame
Instance.new("UICorner", testBtn).CornerRadius = UDim.new(0, 6)

-- Dragging
do
    local UIS = game:GetService("UserInputService")
    local dragging, dragStart, startPos
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- Button actions
runBtn.MouseButton1Click:Connect(function()
    local dur = tonumber(durBox.Text)
    if not dur or dur <= 0 then
        dur = DEFAULT_DURATION
        durBox.Text = tostring(dur)
        notify("CFrame Player", "Invalid duration. Using default: " .. tostring(dur) .. "s", 2)
        wlog("Invalid duration in box; defaulting to", dur)
    end
    log("Run button pressed. duration =", dur)
    Runner:start(dur)
end)

testBtn.MouseButton1Click:Connect(function()
    -- Minimal proof: rotate RightShoulder by ~30 degrees around Z for 1s, then restore.
    log("Sanity Test: attempting to swing RightShoulder for 1s.")
    local ch = waitForCharacter(lp)
    local motors = mapMotors(ch)
    local rs = motors["RightShoulder"] or motors["Right Shoulder"] -- R6 fallback
    if not rs then
        wlog("Sanity Test FAILED: RightShoulder motor not found.")
        notify("Sanity Test", "RightShoulder not found", 2)
        return
    end
    local original = rs.Transform
    local start = os.clock()
    local conn
    conn = RunService.RenderStepped:Connect(function()
        local t = os.clock() - start
        local ang = math.rad(30) * math.sin(t * math.pi * 2) -- back/forth within 1s
        local ok = trySetTransform(rs, CFrame.Angles(0, 0, ang))
        if not ok then wlog("Sanity Test write failed") end
        if t >= 1.0 then
            conn:Disconnect()
            rs.Transform = original
            log("Sanity Test complete; restored RightShoulder transform.")
            notify("Sanity Test", "Completed", 1.5)
        end
    end)
end)

-- Safety: ensure Animate is enabled if UI is removed
gui.AncestryChanged:Connect(function(_, parent)
    if not parent then
        if Runner.playing then Runner:stop(true) end
        local ch = lp.Character or lp.CharacterAdded:Wait()
        local a = getAnimate(ch)
        if a then a.Disabled = false end
        log("UI removed; ensured Animate enabled.")
    end
end)

log("Dense CFrame Player loaded. Click 'Run custom CFrame pose' or 'Sanity Test'.")
